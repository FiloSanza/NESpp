#ifndef NESPP_OPCODE_HANDLERS_H
#define NESPP_OPCODE_HANDLERS_H

#include "../cpu.h"
#include "transfer_opcodes_handlers.h"
#include "store_opcodes_handlers.h"
#include <map>
#include <functional>
#include <stdexcept>

namespace nespp {

    enum Opcodes {
        ADC_IMM     = 0x69,
        ADC_ZERO    = 0x65,
        ADC_ZERO_X  = 0x75,
        ADC_ABS     = 0x6d,
        ADC_ABS_X   = 0x7d,
        ADC_ABS_Y   = 0x79,
        ADC_IND_X   = 0x61,
        ADC_IND_Y   = 0x71,
        AND_IMM     = 0x29,
        AND_ZERO    = 0x25,
        AND_ZERO_X  = 0x35,
        AND_ABS     = 0x2d,
        AND_ABS_X   = 0x3d,
        AND_ABS_Y   = 0x39,
        AND_IND_X   = 0x21,
        AND_IND_Y   = 0x31,
        ASL_ACC     = 0x0A,
        ASL_ZERO    = 0x06,
        ASL_ZERO_X  = 0x16,
        ASL_ABS     = 0x0e,
        ASL_ABS_X   = 0x1e,
        BCC         = 0x90,
        BCS         = 0xb0,
        BEQ         = 0xf0,
        BIT_ZERO    = 0x24,
        BIT_ABS     = 0x2c,
        BMI         = 0x30,
        BNE         = 0xd0,
        BPL         = 0x10,
        BRK         = 0x00,
        BVC         = 0x50,
        BVS         = 0x70,
        CLC         = 0x18,
        CLD         = 0xd8,
        CLI         = 0x58,
        CLV         = 0xb8,
        CMP_IMM     = 0xc9,
        CMP_ZERO    = 0xc5,
        CMP_ZERO_X  = 0xd5,
        CMP_ABS     = 0xcd,
        CMP_ABS_X   = 0xdd,
        CMP_ABS_Y   = 0xd9,
        CMP_IND_X   = 0xc1,
        CMP_IND_Y   = 0xd1,
        CPX_IMM     = 0xe0,
        CPX_ZERO    = 0xe4,
        CPX_ABS     = 0xec,
        CPY_IMM     = 0xc0,
        CPY_ZERO    = 0xc4,
        CPY_ABS     = 0xcc,
        DEC_ZERO    = 0xc6,
        DEC_ZERO_X  = 0xd6,
        DEC_ABS     = 0xce,
        DEC_ABS_X   = 0xde,
        DEX         = 0xca,
        DEY         = 0x88,
        EOR_IMM     = 0x49,
        EOR_ZERO    = 0x45,
        EOR_ZERO_X  = 0x55,
        EOR_ABS     = 0x4d,
        EOR_ABS_X   = 0x5d,
        EOR_ABS_Y   = 0x59,
        EOR_IND_X   = 0x41,
        EOR_IND_Y   = 0x51,
        INC_ZERO    = 0xe6,
        INC_ZERO_X  = 0xf6,
        INC_ABS     = 0xee,
        INC_ABS_X   = 0xfe,
        INX         = 0xe8,
        INY         = 0xc8,
        JMP_ABS     = 0x4c,
        JMP_IND     = 0x6c,
        JSR         = 0x20,
        LDA_IMM     = 0xa9,
        LDA_ZERO    = 0xa5,
        LDA_ZERO_X  = 0xb5,
        LDA_ABS     = 0xad,
        LDA_ABS_X   = 0xbd,
        LDA_ABS_Y   = 0xb9,
        LDA_IND_X   = 0xa1,
        LDA_IND_Y   = 0xb1,
        LDX_IMM     = 0xa2,
        LDX_ZERO    = 0xa6,
        LDX_ZERO_Y  = 0xb6,
        LDX_ABS     = 0xae,
        LDX_ABS_Y   = 0xbe,
        LDY_IMM     = 0xa0,
        LDY_ZERO    = 0xa4,
        LDY_ZERO_Y  = 0xb4,
        LDY_ABS     = 0xac,
        LDY_ABS_Y   = 0xbc,
        LSR_ACC     = 0x4a,
        LSR_ZERO    = 0x46,
        LSR_ZERO_X  = 0x56,
        LSR_ABS     = 0x4e,
        LSR_ABS_X   = 0x5e,
        NOP         = 0xea,
        ORA_IMM     = 0x09,
        ORA_ZERO    = 0x05,
        ORA_ZERO_X  = 0x15,
        ORA_ABS     = 0x0d,
        ORA_ABS_X   = 0x1d,
        ORA_ABS_Y   = 0x19,
        ORA_IND_X   = 0x01,
        ORA_IND_Y   = 0x11,
        PHA         = 0x48,
        PHP         = 0x04,
        PLA         = 0x68,
        PLP         = 0x28,
        ROL_ACC     = 0x2a,
        ROL_ZERO    = 0x26,
        ROL_ZERO_X  = 0x36,
        ROL_ABS     = 0x2e,
        ROL_ABS_X   = 0x3e,
        ROR_ACC     = 0x6a,
        ROR_ZERO    = 0x66,
        ROR_ZERO_X  = 0x76,
        ROR_ABS     = 0x6e,
        ROR_ABS_X   = 0x7e,
        RTI         = 0x40,
        RTS         = 0x60,
        SBC_IMM     = 0xe9,
        SBC_ZERO    = 0xe5,
        SBC_ZERO_X  = 0xf5,
        SBC_ABS     = 0xed,
        SBC_ABS_X   = 0xfd,
        SBC_ABS_Y   = 0xf9,
        SBC_IND_X   = 0xe1,
        SBC_IND_Y   = 0xf1,
        SEC         = 0x38,
        SED         = 0xf8,
        SEI         = 0x78,
        STA_ZERO    = 0x85,
        STA_ZERO_X  = 0x95,
        STA_ABS     = 0x8d,
        STA_ABS_X   = 0x9d,
        STA_ABS_Y   = 0x99,
        STA_IND_X   = 0x81,
        STA_IND_Y   = 0x91,
        STX_ZERO    = 0x86,
        STX_ZERO_Y  = 0x96,
        STX_ABS     = 0x8e,
        STY_ZERO    = 0x84,
        STY_ZERO_X  = 0x94,
        STY_ABS     = 0x8c,
        TAX         = 0xaa,
        TAY         = 0xa8,
        TSX         = 0xba,
        TXA         = 0x8a,
        TXS         = 0x9a,
        TYA         = 0x98
    };

    class OpcodeHandlers {
    public:
        OpcodeHandlers();
        void handle_opcode(Cpu &cpu, uint8_t opcode);

    private:
        std::map<uint8_t, std::function<void(Cpu &)>> handlers;
    };

}

#endif //NESPP_OPCODE_HANDLERS_H
